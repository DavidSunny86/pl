

// functions


void getDonorSiteAndIndex( inout uint site, inout uint localIndex )
{
    localIndex = gl_GlobalInvocationID.x;
    for (uint i=0; i<uDonorSiteCount; i++)
    {
        if ( localIndex < uDonorSiteGridPointCounts[ i ] )
        {
            site = i;
            break;
        }
        localIndex -= uDonorSiteGridPointCounts[ i ];
    }
}


void getDonorSiteAndIndex( inout uint site, inout uint localIndex, in uint globalIndex )
{
    localIndex = globalIndex;
    for (uint i=0; i<uDonorSiteCount; i++)
    {
        if ( localIndex < uDonorSiteGridPointCounts[ i ] )
        {
            site = i;
            break;
        }
        localIndex -= uDonorSiteGridPointCounts[ i ];
    }
}


vec4 donorSitePositions( in uint site, in uint i )
{
    return donorSiteData[ uDonorSiteDataOffsets[ site ] + i ];
}


vec4 donorSiteNormals( in uint site, in uint i )
{
    return donorSiteData[ uDonorSiteDataOffsets[ site ] + uDonorSiteGridPointCounts[ site ] + i ];
}


triangle donorSiteTriangles( in uint site, in uint i )
{
    uint j = uDonorSiteDataOffsets[ site ] + uDonorSiteGridPointCounts[ site ]*2 + i*4;
    triangle t;
    t.p0 = donorSiteData[j+0].xyz;
    t.p1 = donorSiteData[j+1].xyz;
    t.p2 = donorSiteData[j+2].xyz;
    t.n  = donorSiteData[j+3].xyz;
    return t;
}


edge donorSiteEdge( in uint site, in uint i )
{
    uint offset = uDonorSiteDataOffsets[ site ] + uDonorSiteGridPointCounts[ site ]*2 + uDonorSiteTriangleCounts[ site ]*4;

    uint j = offset + i;
    uint k = offset + ( (i+1) % uDonorSiteBoundaryPointCounts[ site ] );

    edge e;
    e.p0 = donorSiteData[ j ].xyz;
    e.p1 = donorSiteData[ k ].xyz;
    e.n  = donorSiteData[ j + uDonorSiteBoundaryPointCounts[ site ] ].xyz;
    return e;
}


bool isWithinDonorBoundary( in uint site, in vec3 position, in vec3 normal, in float radius )
{
    // checks if closest point on all edges is within radius distance to the grafts central axis
    bool inside = true;
    for (int i=0; i < uDonorSiteBoundaryPointCounts[ site ]; i++)
    {
        edge e = donorSiteEdge( site, i );

        // get closest point on edges
        vec3 closestPoint = closestPointOnSegment( position, e.p0, e.p1 ) - position;   // get closest point in graft coords

        // check if within radius distance
        if ( distToAxis( normal, closestPoint ) < radius )
        {
            inside = false;
            break;
        }
    }
    return inside;
}
