

bool rayIntersectDefect( inout vec3 point, in vec3 rayStart, in vec3 rayDir, in vec3 graftPosition, in uint graftIndex )
{
    bool result = false;
    float minT = PL_FLT_MAX;
    
    uint count = getDefectCapCount( graftIndex );
    for (uint i=0; i< count; i++)
    {
        triangle tri = getDefectCapTriangles( graftIndex, graftPosition, i );
        vec3  p;
        float t;
        if ( rayIntersectTriangle( p, t, rayStart, rayDir, tri ) )
        {             
            result = true;
            if ( abs( t ) < minT )
            {
                minT = abs( t );
                point = p;
            }
            
        }
    }
    return result;
}


bool rayIntersectDonor( inout vec3 point, in vec3 rayStart, in vec3 rayDir, in vec3 gridPosition, in uint siteIndex )
{
    bool result = false;
    float minT = PL_FLT_MAX;
    
    uint count = getDonorCapCount();
    for (uint i=0; i<count; i++)
    {
        triangle tri = getDonorCapTriangles( siteIndex, gridPosition, i );
        vec3  p;
        float t;
        if ( rayIntersectTriangle( p, t, rayStart, rayDir, tri ) )
        {           
            result = true;
            if ( abs( t ) < minT )
            {
                minT = abs( t );
                point = p;                
            }
            
        }
    }
    return result;
}


float calcRMS( in vec3 defectPosition, in vec3 defectNormal, in vec3 defectX, in vec3 defectZ, in vec3 donorPosition, in vec3 donorNormal, in vec3 donorX, in vec3 donorZ, in uint siteIndex, in uint graftIndex )
{
    // ray intersect at certain points, and calc distance

    uint  successfulChecks   = 0;
    float squaredDistanceSum = 0.0;
    
    float dr = PL_STAGE_2_RADIUS_INCREMENT( defectSolutionGraftRadii( graftIndex ) );

    for (uint i=1; i<=PL_STAGE_2_NUM_COMPARISON_RADII; i++)
    { 
        for (uint j=0; j < PL_STAGE_2_NUM_COMPARISON_SLICES; j++)
        {     
            float theta = j * PL_STAGE_2_SLICE_ANGLE_INCREMENT;

            float sa = sin( theta );
            float ca = cos( theta );
    
            vec3 defectCast = normalize( defectX * sa + defectZ * ca ) * (dr * i);
            vec3 donorCast  = normalize( donorX  * sa + donorZ  * ca ) * (dr * i);

            vec3 defectIntPoint, donorIntPoint;
            bool i0 = rayIntersectDefect( defectIntPoint, defectCast, defectNormal, defectPosition, graftIndex );
            bool i1 = rayIntersectDonor ( donorIntPoint,  donorCast,  donorNormal,  donorPosition, siteIndex  );               
            if ( i0 && i1 )
            {    
                // intersection failures may occur if defect grafts overlap boundaries ( thus missing triangles on cap )
                float distance = dot( defectIntPoint, defectNormal ) - dot( donorIntPoint, donorNormal );               
                squaredDistanceSum += distance * distance;
                successfulChecks++;
            }

        }       
    }

    return sqrt( squaredDistanceSum / float( successfulChecks ) ); 
}


void main(void)
{ 
    // get specific defect site and local index of grid point
    uint siteIndex, localIndex;
    getDonorSiteAndIndex( siteIndex, localIndex );
    
    // get grid point
    vec3 donorGridPosition  = donorSitePositions( siteIndex, localIndex ).xyz;
    vec3 donorSurfaceNormal = donorSiteNormals  ( siteIndex, localIndex ).xyz;
          
    // for each graft in solution
    for (uint i=0; i<uDefectSolutionGraftCount; i++)
    {       
        vec3 defectGraftPosition = defectSolutionGraftPositions( i );
        vec3 defectGraftNormal   = defectSolutionGraftNormals  ( i );
        vec3 defectSurfaceNormal = defectSolutionSurfaceNormals( i );

        // get rotational transform from donor to defect orientation relative to surface
        mat4 rotation;   defectToDonorRotation( rotation, defectSurfaceNormal, donorSurfaceNormal, getRotationAngle() );

        // rottate defect graft into donor graft space
        vec3 donorGraftNormal = normalize( ( rotation * vec4( defectGraftNormal, 1.0 ) ).xyz );
        
        float rms = -1.0;       
        if ( isWithinDonorBoundary( siteIndex, donorGridPosition, donorGraftNormal, defectSolutionGraftRadii( i ) ) )
        {
            // get defect graft tangents
            vec3 defectGraftX = cross( defectGraftNormal, vec3( 0, 0, 1 ) );
            vec3 defectGraftZ = cross( defectGraftX, defectGraftNormal );
            
            // get donor graft tangents
            vec3 donorGraftX      = normalize( ( rotation * vec4( defectGraftX, 1.0 ) ).xyz );
            vec3 donorGraftZ      = normalize( ( rotation * vec4( defectGraftZ, 1.0 ) ).xyz );
        
            rms = calcRMS( defectGraftPosition, defectGraftNormal, defectGraftX, defectGraftZ, donorGridPosition, donorGraftNormal, donorGraftX, donorGraftZ, siteIndex, i );  
        }
        setRMS( rms, i );   
    } 

}

