

// functions

vec4 defectSitePositions(in uint i)
{
    return defectSiteData[i];
}


vec4 defectSiteNormals(in uint i)
{
    return defectSiteData[uDefectSiteGridPointCount+i];
}


triangle defectSiteTriangles(in uint i)
{
    uint j = uDefectSiteGridPointCount*2 + i*4;
    triangle t;
    t.p0 = defectSiteData[j+0].xyz;
    t.p1 = defectSiteData[j+1].xyz;
    t.p2 = defectSiteData[j+2].xyz;
    t.n  = defectSiteData[j+3].xyz;
    return t;
}


edge defectSiteEdge(in uint i)
{
    uint offset = uDefectSiteGridPointCount*2 + uDefectSiteTriangleCount*4;
    uint j = offset + i;
    uint k = offset + ((i+1) % uDefectSiteBoundaryPointCount);

    edge e;
    e.p0 = defectSiteData[j].xyz;
    e.p1 = defectSiteData[k].xyz;
    e.n  = defectSiteData[j+uDefectSiteBoundaryPointCount].xyz;   // tangent pointing out
    return e;
}


bool isWithinDefectBoundaryThreshold(in vec3 position, in vec3 normal, in float32_t threshold)
{
    // checks if closest point on all edges is within radius distance to the grafts central axis
    bool inside = true;
    for (int32_t i=0; i<uDefectSiteBoundaryPointCount; i++)
    {
        edge e = defectSiteEdge(i);

        /* check if outside boundary
        if (dot(position-e.p0, e.n) > 0.0)
            inside = false;
        */

        vec3 closestPoint = closestPointOnSegment(position, e.p0, e.p1) - position;    // get closest point in graft coords

        // check if within threshold distance
        if (distToAxis(normal, closestPoint) < threshold)
        {
            inside = false;
            break;
        }

    }
    return inside;
}


bool isWithinDefectRotationThreshold(in vec3 normal, in float32_t threshold)
{
    return acos(dot(normal, vec3(uDefectSiteAvgNormal))) < threshold*0.01745329;
}
