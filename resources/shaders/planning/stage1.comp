


uint getTotalDonorPoints()
{
    uint totalPoints = 0;
    for (uint i=0; i<uDonorSiteCount; i++)
    {
        totalPoints += uDonorSiteGridPointCounts[i];   
    }    
        
    return totalPoints;
}


uint calculateDefectCap(in vec3 position, in vec3 normal, in uint index)
{ 
    uint triangleCount = 0;
    
    for(uint i=0; i<uDefectSiteTriangleCount; i++)
    {
        // create triangle struct
        triangle tri = defectSiteTriangles(i);

        if (graftIntersectTriangleFull(position, normal, tri, PL_MAX_GRAFT_RADIUS))
        {
            // if intersected by graft cap, add to temp array
            setDefectCapTriangleIndex(index, triangleCount, i);
            triangleCount++;
        }
    }
    return triangleCount;
}


uint calculateDonorCap(in vec3 position, in vec3 normal, in uint site)
{    
    uint triangleCount = 0;
    
    for(uint i=0; i<uDonorSiteTriangleCounts[site]; i++)
    {
        // create triangle struct
        triangle tri = donorSiteTriangles(site, i);

        if (graftIntersectTriangleFull(position, normal, tri, PL_STAGE_1_DONOR_CAP_RADIUS))
        {
            // if intersected by graft cap, add to temp array
            setDonorCapTriangleIndex(triangleCount, i);
            triangleCount++;
        }
    }
    return triangleCount;
}


void main(void)
{ 

    // check if invocation id represents a donor point or defect point 
    if (gl_GlobalInvocationID.x < uDonorTotalGridPointCount)
    {     
        // get specific defect site and local index of grid point
        uint site, localIndex;
        getDonorSiteAndIndex(site, localIndex);
          
        // get grid point
        vec3 gridPosition = donorSitePositions(site, localIndex).xyz;
        vec3 gridNormal   = donorSiteNormals  (site, localIndex).xyz;
        
        uint donorCount = calculateDonorCap(gridPosition, gridNormal, site);   
        setDonorCapIndexCount (donorCount);   
    }
    else
    {
        uint graftIndex = gl_GlobalInvocationID.x - uDonorTotalGridPointCount;
        
        // if above graft count, abort
        if (graftIndex < defectSolutionGraftCount())
        {
            vec3 graftPosition = defectSolutionGraftPositions(graftIndex);
            vec3 graftNormal   = defectSolutionGraftNormals  (graftIndex);
            
            uint defectCount = calculateDefectCap(graftPosition, graftNormal, graftIndex);
            setDefectCapIndexCount (graftIndex, defectCount);
        }
    
    }
}
